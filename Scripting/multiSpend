#include <bitcoin/bitcoin.hpp>
#include "HD_walletTESTNET.cpp"
#include <string.h>

using namespace bc;
using namespace bc::wallet;
using namespace bc::machine;
using namespace bc::chain;


//previous output 
output_point getUTXO()
{
	hash_digest previousTX = hash_literal("5c5e8157bc37d40e6531e562a8f6a1b04ba19c6487cf17e11b9646e6df1633ed");
	return output_point(previousTX, 0u);
}


//Previous Locking Script
script redeemScript(data_chunk p1, data_chunk p2, data_chunk p3)
{
	data_stack keys {p1, p2, p3};
	return script(script().to_pay_multisig_pattern(2, keys));
}

script previousLocking(data_chunk p1, data_chunk p2, data_chunk p3)
{
	short_hash scriptHash = bitcoin_short_hash(redeemScript(p1, p2, p3).to_data(1));
	return script(script().to_pay_script_hash_pattern(scriptHash));
}

//input
input makeInput()
{
	input input1();
	input.set_previous_output(getUTXO());
	input.set_sequence(0xffffffff);
	return input;
}

//output
script makelockingScript()
{
	payment_address destination("n2ge1S4bLDvJKx8AGXrK5JHY2D5cReVytu");
	return (script().to_pay_key_hash_pattern(destination.hash()));
}
output makeOutput()
{
	uint64_t amount = 66920000;
	script lockingScript = makelockingScript();
	return output(amount, lockingScript);
}

//transaction object 
transaction makeTX()
{

	transaction tx; 
	tx.inputs().push_back(makeInput());
	tx.outputs().push_back(makeOutput());
	return tx;
}

//signing 
endorsment signature(data_chunk p1, data_chunk p2, data_chunk p3, tx, wallet)
{
	endorsment endorsed; 
	if(script().create_endorsement(endorsed, wallet1.childPrivateKey(1).secret(), previousLocking(p1, p2, p3), tx, 0u, all)
	{
		return endorsed;
	} else {
		std::cout << "Signature Failed!! " << std::endl;
		return endorsed;
	}
}

script buildSigScript(endorsment endorsed1, endorsment endorsed2, data_chunk p1, data_chunk p2, data_chunk p3)
{
	operation::list ops = {operation(endorsed1), operation(endorsed2)}
	script redeem = redeemScript(p1, p2, p3);
	for(int i = 0; i < redeem.operations().size(); i++)
	{
		ops.push_back(redeem.operations()[i]);
	}
	if(script().is_sign_multisig_pattern(ops))
	{
		std::cout<< "Sign Multisig pattern: " << std::endl;
		return script(ops);
	}else{
		std::cout << "Not sign Multisig patter: " std::endl;
		return script(ops);
	}
}
//output 


int main()
{
	std::string Mnemonic1 = "chase pair scorpion slab pause imitate dog blouse check dignity message strong";
	std::string Mnemonic2 = "logic waste merit drama fatal pen type embody room ladder skin chicken";
	std::string Mnemonic3 = "early total frog beauty shrimp urban waste detect journey dad draft myth";

	HD_Wallet wallet1(split(Mnemonic1));
	HD_Wallet wallet2(split(Mnemonic2));
	HD_Wallet wallet3(split(Mnemonic3));

	data_chunk p1 = to_chunk(wallet1.childPublicKey(1).point());
	data_chunk p2 = to_chunk(wallet2.childPublicKey(1).point());
	data_chunk p3 = to_chunk(wallet3.childPublicKey(1).point());

	transaction tx = makeTX();
	endorsement sig1 = signature(p1, p2, p3, tx, wallet);
	endorsement sig2 = signature(p1, p2, p3, tx, wallet);
	script sigScript = buildSigScript(sig1, sig2, p1, p2, p3);

	tx.inputs()[0].set_script(sigScript);

	std::cout << encode_base16(tx.to_data(0)) << std::endl;



}